NAME: Bach Hoang
ID: 104737449
EMAIL: ko.wing.bird@gmail.com

2.1.1:
It takes many iterations before errors are seen because the number of iterations
increases the chance that more than one thread accessing the shared resource 
(counter) at the same time causing the race condition.
A significantly smaller number of iterations seldom fail since the probability of
multiple threads entering the critical section at the same time is significantly low 
which means much less chance for race condition to happen.

2.1.2:
The average cost per operation equals the total run time divided by the number of
operation so the average cost per operation drops with increasing iterations. Also
thread creation is expensive but by having many iterations the cost become
insignificant.
If the cost per operation is a function of the number of iterations we can have the
number of iterations to go to infinity and when the cost converges, we know we have
the 'correct' cost (or how many iterations to run).

2.1.4:
All of the options perform similarly for low numbers of threads because the chance 
of more than one thread entering critical section is low. The threads perform
the work in a seemingly sequential fashion therefore the lock doesn't have much
work to do.
The three protected operations slow down as the number of threads rises since now
the probability of more than one thread entering critical section is high and the
lock protects the section by keeping threads waiting. The more threads we have the
higher this waiting time.

2.2.1:
The variation in time per mutex-protected operation vs the number of threads in add
and sorted lists is that the critical section for the sorted list is longer meaning
that there are more chances that more than one thread entering it at the same time.
That's why it will take longer for the locking mechanism. 
The curve for add goes upward and then start going down when the number of threads
equals 4 while the curve for sorted list consistantly going up.
The reason for the difference in shape is that again the critical section in sorted
list is longer than in add so even through with large number of iterations the cost
per operation for sorted list keeps increasing while the cost for add decreases at
some point.

2.2.2:
Based on List-4 graph, mutex scales better than spin lock meaning the cost per 
operation for mutex is less than for spin lock as the number of threads increase. 
The cost per operation for both are roughly the same when the number of threads is 
1 but diverges as the number of threads increases. 
The mutex curve is an nearly smooth upward curve while the spin lock curve is also 
an upward curve but with inconsistance. The rate of increase for mutex is gradual
while spin lock has sharp increase intervals and even a minor decrease interval.
The reason for this is that the critical section for link list is large and spin
lock is not effective to keep CPU spinning during a long critical section.


File included:
lab2_add.c : program for part 1
lab2_add.csv : result for part 1 test
lab2_add-1/2/3/4/5.png : graphs for part 1
lab2_add.gp : gnuplot script for part 1
lab2_list.c, SortedList.h, SortedList.c : program for part 2
lab2_list.csv : result for part 2 test
lab2_list-1/2/3/4.png : graphs for part 2
lab2_list.gp : gnuplot scipt for part 2
sample.sh : script to generate the 2 csv files
Makefile, README 
